<?php

namespace Tests\Feature\V1;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Route;
use Tests\TestCase;

use App\Http\Middleware\V1\ValidateJsonApiHeaders;

class ValidateJsonApiHeadersTest extends TestCase
{
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        Route::any('test-route', fn() => 'ok')
            ->middleware(ValidateJsonApiHeaders::class);
    }

    /** @test */
    public function accept_header_must_be_present_in_all_request(): void
    {
        $this->getJson('test-route')
            ->assertStatus(406);

        $this->getJson('test-route', [
            'accept' => 'application/vnd.api+json'
        ])->assertSuccessful();
    }

    /** @test */
    public function content_type_must_be_present_on_all_post_requests(): void
    {
        $this->postJson('test-route', [], [
            'accept' => 'application/vnd.api+json'
        ])->assertStatus(415);

        $this->postJson('test-route', [], [
            'accept' => 'application/vnd.api+json',
            'content-type' => 'application/vnd.api+json',
        ])->assertSuccessful();
    }

    /** @test */
    public function content_type_must_be_present_on_all_patch_requests(): void
    {
        $this->patchJson('test-route', [], [
            'accept' => 'application/vnd.api+json'
        ])->assertStatus(415);

        $this->patchJson('test-route', [], [
            'accept' => 'application/vnd.api+json',
            'content-type' => 'application/vnd.api+json',
        ])->assertSuccessful();
    }

    /** @test */
    public function content_type_must_be_present_in_responses(): void
    {
        $this->getJson('test-route', [
            'accept' => 'application/vnd.api+json',
        ])->assertHeader('content-type', 'application/vnd.api+json');

        $this->postJson('test-route', [], [
            'accept' => 'application/vnd.api+json',
            'content-type' => 'application/vnd.api+json'
        ])->assertHeader('content-type', 'application/vnd.api+json');

        $this->patchJson('test-route', [], [
            'accept' => 'application/vnd.api+json',
            'content-type' => 'application/vnd.api+json'
        ])->assertHeader('content-type', 'application/vnd.api+json');
    }

    /** @test */
    public function content_type_must_not_be_present_in_empty_responses(): void
    {
        Route::any('empty-response', fn () => response()->noContent())
            ->middleware(ValidateJsonApiHeaders::class);

        $this->getJson('empty-response', [
            'accept' => 'application/vnd.api+json',
        ])->assertHeaderMissing('content-type');

        $this->postJson('empty-response', [], [
            'accept' => 'application/vnd.api+json',
            'content-type' => 'application/vnd.api+json'
        ])->assertHeaderMissing('content-type');

        $this->patchJson('empty-response', [], [
            'accept' => 'application/vnd.api+json',
            'content-type' => 'application/vnd.api+json'
        ])->assertHeaderMissing('content-type');

        $this->deleteJson('empty-response', [], [
            'accept' => 'application/vnd.api+json',
            'content-type' => 'application/vnd.api+json'
        ])->assertHeaderMissing('content-type');
    }
}
